{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback(function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: options.includeHeaders ?? true,\n      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n      ignoreValueFormatter,\n      apiRef,\n      shouldAppendQuotes: options.shouldAppendQuotes ?? true\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","props","logger","ignoreValueFormatterProp","ignoreValueFormatterDuringExport","ignoreValueFormatter","csvExport","getDataAsCsv","useCallback","options","arguments","length","undefined","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","delimiterCharacter","delimiter","includeHeaders","includeColumnGroupsHeaders","shouldAppendQuotes","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","csvOptions","disableToolbarButton","component","componentName"],"sources":["C:/Users/franc/Desktop/Projetos/ProjetoAdvocaciaFront/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridCsvExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;\n  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === 'object' ? ignoreValueFormatterProp?.csvExport : ignoreValueFormatterProp) || false;\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: options.includeHeaders ?? true,\n      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,\n      ignoreValueFormatter,\n      apiRef,\n      shouldAppendQuotes: options.shouldAppendQuotes ?? true\n    });\n  }, [logger, apiRef, ignoreValueFormatter]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options?.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options?.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    if (options.csvOptions?.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}