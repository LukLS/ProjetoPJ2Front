{"ast":null,"code":"import ApiService, { LOGGED_USER, TOKEN } from './ApiService';\nimport StorageService from './StorageService';\nexport class AuthenticationApiService extends ApiService {\n  constructor() {\n    super('');\n    this.aa = () => {\n      if (JSON.parse(localStorage.getItem(\"loggedUser\")) == null) {\n        let user = {\n          name: ''\n        };\n        this.storageService.setItem(LOGGED_USER, user);\n      }\n    };\n    this.storageService = new StorageService();\n    this.aa();\n  }\n  async login(username, password) {\n    const loginDTO = {\n      \"username\": username,\n      \"password\": password\n    };\n    try {\n      const response = await this.post('/login', loginDTO);\n      const user = response.data.user;\n      const token = response.data.token;\n      this.storageService.setItem(\"user\", user);\n      this.storageService.setItem(LOGGED_USER, user);\n      this.storageService.setItem(TOKEN, token);\n      this.registerToken(token);\n      return user;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Checa se o token é válido\n  isTokenValid(token) {\n    const rest = this.post('/isValidToken', token);\n    if (rest.data == false) {\n      localStorage.clear();\n      window.open(\"/\", '_self');\n    } else {\n      return rest;\n    }\n  }\n\n  //Remove os dados do usuário\n  logout() {\n    this.storageService.removeItem(LOGGED_USER);\n    this.storageService.removeItem(TOKEN);\n    return this.post('/logout');\n  }\n\n  //Retorna o usuário logado armazenado no storageService\n  getLoggedUser() {\n    return this.storageService.getItem(LOGGED_USER);\n  }\n\n  //Retorna o token armazenado no storageService\n  getToken() {\n    return this.storageService.getItem(TOKEN);\n  }\n\n  //Pega o usuário logado e o token do storageService e envia o token para a api para checar se é válido\n  async isAuthenticated() {\n    const user = this.getLoggedUser();\n    const token = this.getToken();\n    if (!user || !token) {\n      return false;\n    }\n    const tokenDTO = {\n      \"token\": token\n    };\n    const response = await this.isTokenValid(tokenDTO);\n    return response.data;\n  }\n}\nexport default AuthenticationApiService;","map":{"version":3,"names":["ApiService","LOGGED_USER","TOKEN","StorageService","AuthenticationApiService","constructor","aa","JSON","parse","localStorage","getItem","user","name","storageService","setItem","login","username","password","loginDTO","response","post","data","token","registerToken","error","isTokenValid","rest","clear","window","open","logout","removeItem","getLoggedUser","getToken","isAuthenticated","tokenDTO"],"sources":["C:/Users/franc/Desktop/Projetos/ProjetoAdvocaciaFront/src/services/AuthenticationApiService.js"],"sourcesContent":["import ApiService, {LOGGED_USER, TOKEN} from './ApiService';\r\nimport StorageService from './StorageService';\r\n\r\nexport class AuthenticationApiService extends ApiService {\r\n\r\n    constructor(){\r\n        super('');\r\n        this.storageService = new StorageService();\r\n        this.aa(); \r\n    }\r\n\r\n    aa= () =>{\r\n        if(JSON.parse(localStorage.getItem(\"loggedUser\")) == null){\r\n            let user ={\r\n                name:''\r\n            }\r\n             this.storageService.setItem(LOGGED_USER, user);\r\n        }\r\n    }\r\n\r\n    async login(username, password){\r\n        const loginDTO = {\r\n             \"username\": username,\r\n             \"password\": password\r\n        };\r\n\r\n        try{   \r\n        const response = await this.post('/login', loginDTO);\r\n\r\n           const user = response.data.user;\r\n           \r\n            const token = response.data.token;\r\n          \r\n            this.storageService.setItem(\"user\", user)\r\n\r\n            this.storageService.setItem(LOGGED_USER, user);\r\n           \r\n            this.storageService.setItem(TOKEN, token);\r\n\r\n            this.registerToken(token);\r\n            return user;\r\n        } catch(error){\r\n            return null;\r\n        }\r\n        \r\n    }\r\n    \r\n    // Checa se o token é válido\r\n    isTokenValid(token){\r\n        const rest = this.post('/isValidToken', token);\r\n        if(rest.data == false){\r\n            localStorage.clear();\r\n            window.open(\"/\", '_self');\r\n        } \r\n        else{\r\n            return rest;\r\n        }\r\n   \r\n    }\r\n    \r\n    //Remove os dados do usuário\r\n    logout(){\r\n        this.storageService.removeItem(LOGGED_USER);\r\n        this.storageService.removeItem(TOKEN);\r\n        \r\n        return this.post('/logout');\r\n    }\r\n\r\n    //Retorna o usuário logado armazenado no storageService\r\n    getLoggedUser(){\r\n        return this.storageService.getItem(LOGGED_USER);\r\n    }\r\n    \r\n    //Retorna o token armazenado no storageService\r\n    getToken(){\r\n        return this.storageService.getItem(TOKEN);\r\n    }\r\n\r\n    //Pega o usuário logado e o token do storageService e envia o token para a api para checar se é válido\r\n    async isAuthenticated(){\r\n        const user = this.getLoggedUser();\r\n        const token = this.getToken();\r\n\r\n        if (!user || !token){\r\n            return false;\r\n        }\r\n\r\n        const tokenDTO = {\r\n            \"token\": token\r\n        }\r\n\r\n        const response = await this.isTokenValid(tokenDTO);\r\n        return response.data;\r\n    }\r\n\r\n}\r\n\r\nexport default AuthenticationApiService"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}