{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\franc\\\\Desktop\\\\Projetos\\\\ProjetoAdvocaciaFront\\\\src\\\\screens\\\\casos\\\\Casos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Casos.css\";\nimport TextField from '@mui/material/TextField';\nimport axios from \"axios\";\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Casos = () => {\n  _s();\n  const [processos, setProcessos] = useState([]);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n  useEffect(() => {\n    // Função para buscar processos do backend\n    const fetchProcessos = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/api/processos');\n        setProcessos(response.data);\n      } catch (error) {\n        setSnackbarMessage('Erro ao buscar processos!');\n        setSnackbarSeverity('error');\n        setSnackbarOpen(true);\n      }\n    };\n    fetchProcessos();\n  }, []);\n  const handleSearchChange = event => {\n    setSearchQuery(event.target.value);\n  };\n  const handleFilterChange = event => {\n    setFilterQuery(event.target.value);\n  };\n  const handleCloseSnackbar = () => {\n    setSnackbarOpen(false);\n  };\n\n  // Filtrando os processos com base na pesquisa e filtro\n  const filteredProcessos = processos.filter(processo => processo.titulo && processo.titulo.toLowerCase().includes(searchQuery.toLowerCase()) && (filterQuery === '' || processo.status === filterQuery));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Pesquisar Processos\",\n          variant: \"outlined\",\n          fullWidth: true,\n          onChange: handleSearchChange,\n          className: \"mb-3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Filtrar por Status\",\n          variant: \"outlined\",\n          fullWidth: true,\n          onChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8\",\n        children: filteredProcessos.length > 0 ? filteredProcessos.map(processo => /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: processo.titulo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              gutterBottom: true,\n              children: processo.descricao\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Prazo: \", new Date(processo.prazo).toLocaleDateString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Status: \", processo.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this)\n        }, processo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: \"Nenhum processo encontrado.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbarOpen,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: snackbarSeverity,\n        sx: {\n          width: '100%'\n        },\n        children: snackbarMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Casos, \"CJyx5v2W7zOruL6DKfBDbwL6QwA=\");\n_c = Casos;\nexport default Casos;\nvar _c;\n$RefreshReg$(_c, \"Casos\");","map":{"version":3,"names":["React","useState","useEffect","TextField","axios","Snackbar","Alert","Card","CardContent","Typography","jsxDEV","_jsxDEV","Casos","_s","processos","setProcessos","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","searchQuery","setSearchQuery","filterQuery","setFilterQuery","fetchProcessos","response","get","data","error","handleSearchChange","event","target","value","handleFilterChange","handleCloseSnackbar","filteredProcessos","filter","processo","titulo","toLowerCase","includes","status","className","children","label","variant","fullWidth","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","map","component","color","gutterBottom","descricao","Date","prazo","toLocaleDateString","id","open","autoHideDuration","onClose","severity","sx","width","_c","$RefreshReg$"],"sources":["C:/Users/franc/Desktop/Projetos/ProjetoAdvocaciaFront/src/screens/casos/Casos.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Casos.css\";\r\nimport TextField from '@mui/material/TextField';\r\nimport axios from \"axios\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Casos = () => {\r\n    const [processos, setProcessos] = useState([]);\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState('');\r\n    const [snackbarSeverity, setSnackbarSeverity] = useState('success');\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [filterQuery, setFilterQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Função para buscar processos do backend\r\n        const fetchProcessos = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8080/api/processos');\r\n                setProcessos(response.data);\r\n            } catch (error) {\r\n                setSnackbarMessage('Erro ao buscar processos!');\r\n                setSnackbarSeverity('error');\r\n                setSnackbarOpen(true);\r\n            }\r\n        };\r\n        fetchProcessos();\r\n    }, []);\r\n\r\n    const handleSearchChange = (event) => {\r\n        setSearchQuery(event.target.value);\r\n    };\r\n\r\n    const handleFilterChange = (event) => {\r\n        setFilterQuery(event.target.value);\r\n    };\r\n\r\n    const handleCloseSnackbar = () => {\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    // Filtrando os processos com base na pesquisa e filtro\r\n    const filteredProcessos = processos.filter(processo => \r\n        (processo.titulo && processo.titulo.toLowerCase().includes(searchQuery.toLowerCase())) &&\r\n        (filterQuery === '' || processo.status === filterQuery)\r\n    );\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"row\">\r\n                {/* Lado Esquerdo - Pesquisa e Filtro */}\r\n                <div className=\"col-md-4 mb-4\">\r\n                    <TextField \r\n                        label=\"Pesquisar Processos\" \r\n                        variant=\"outlined\" \r\n                        fullWidth \r\n                        onChange={handleSearchChange} \r\n                        className=\"mb-3\"\r\n                    />\r\n                    <TextField \r\n                        label=\"Filtrar por Status\" \r\n                        variant=\"outlined\" \r\n                        fullWidth \r\n                        onChange={handleFilterChange} \r\n                    />\r\n                </div>\r\n\r\n                {/* Lado Direito - Card de Processos */}\r\n                <div className=\"col-md-8\">\r\n                    {filteredProcessos.length > 0 ? (\r\n                        filteredProcessos.map(processo => (\r\n                            <Card className=\"mb-4\" key={processo.id}>\r\n                                <CardContent>\r\n                                    <Typography variant=\"h5\" component=\"div\">\r\n                                        {processo.titulo}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                        {processo.descricao}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                        Prazo: {new Date(processo.prazo).toLocaleDateString()}\r\n                                    </Typography>\r\n                                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                        Status: {processo.status}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        ))\r\n                    ) : (\r\n                        <Typography variant=\"body1\">Nenhum processo encontrado.</Typography>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <Snackbar \r\n                open={snackbarOpen} \r\n                autoHideDuration={6000} \r\n                onClose={handleCloseSnackbar}\r\n            >\r\n                <Alert \r\n                    onClose={handleCloseSnackbar} \r\n                    severity={snackbarSeverity} \r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Casos;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}